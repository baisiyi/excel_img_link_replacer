name: Build and Package

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'
  PROJECT_NAME: 'excel-img-link-replacer'
  APP_NAME: 'Excel 图片替换工具'

jobs:
  build-linux:
    name: Build Linux (amd64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install X11/OpenGL build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential pkg-config \
            xorg-dev libx11-dev libxi-dev libxcursor-dev libxrandr-dev \
            libxinerama-dev libxxf86vm-dev \
            libgl1-mesa-dev libglu1-mesa-dev
      - name: Build
        run: |
          mkdir -p dist
          echo "GOOS=linux GOARCH=amd64 CGO_ENABLED=1"
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/${PROJECT_NAME}-linux-amd64 ./cmd/desktop
          echo "dist after linux build:" && ls -la dist/ || true
          test -f dist/${PROJECT_NAME}-linux-amd64
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: dist/${{ env.PROJECT_NAME }}-linux-amd64
          if-no-files-found: error

  build-windows:
    name: Build Windows (amd64)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        shell: cmd
        run: |
          mkdir dist
          echo GOOS=windows GOARCH=amd64 CGO_ENABLED=1
          set CGO_ENABLED=1
          set GOOS=windows
          set GOARCH=amd64
          go build -ldflags="-s -w" -o dist\${{ env.PROJECT_NAME }}-windows-amd64.exe ./cmd/desktop
          echo dist after windows build:
          dir dist
          if not exist dist\${{ env.PROJECT_NAME }}-windows-amd64.exe exit /b 1
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: dist/${{ env.PROJECT_NAME }}-windows-amd64.exe
          if-no-files-found: error

  build-macos-intel:
    name: Build macOS (x86_64)
    runs-on: macos-13
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        run: |
          mkdir -p dist
          echo "GOOS=darwin GOARCH=amd64 CGO_ENABLED=1"
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/${PROJECT_NAME}-darwin-amd64 ./cmd/desktop
          echo "dist after macOS amd64 build:" && ls -la dist/ || true
          test -f dist/${PROJECT_NAME}-darwin-amd64
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: darwin-amd64
          path: dist/${{ env.PROJECT_NAME }}-darwin-amd64
          if-no-files-found: error

  build-macos-arm:
    name: Build macOS (arm64)
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build
        run: |
          mkdir -p dist
          echo "GOOS=darwin GOARCH=arm64 CGO_ENABLED=1"
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/${PROJECT_NAME}-darwin-arm64 ./cmd/desktop
          echo "dist after macOS arm64 build:" && ls -la dist/ || true
          test -f dist/${PROJECT_NAME}-darwin-arm64
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: darwin-arm64
          path: dist/${{ env.PROJECT_NAME }}-darwin-arm64
          if-no-files-found: error

  package:
    name: Create Distribution Packages
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos-intel, build-macos-arm]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: dist/
          merge-multiple: true
      - name: Create distribution packages
        run: |
          sudo apt-get update && sudo apt-get install -y zip
          echo "Dist contents:" && ls -la dist/
          mkdir -p packages
          [ -f dist/${PROJECT_NAME}-linux-amd64 ] && zip packages/${PROJECT_NAME}-linux-amd64.zip dist/${PROJECT_NAME}-linux-amd64 || echo "skip linux-amd64 (missing)"
          [ -f dist/${PROJECT_NAME}-windows-amd64.exe ] && zip packages/${PROJECT_NAME}-windows-amd64.zip dist/${PROJECT_NAME}-windows-amd64.exe || echo "skip windows-amd64 (missing)"
          [ -f dist/${PROJECT_NAME}-darwin-amd64 ] && zip packages/${PROJECT_NAME}-darwin-amd64.zip dist/${PROJECT_NAME}-darwin-amd64 || echo "skip darwin-amd64 (missing)"
          [ -f dist/${PROJECT_NAME}-darwin-arm64 ] && zip packages/${PROJECT_NAME}-darwin-arm64.zip dist/${PROJECT_NAME}-darwin-arm64 || echo "skip darwin-arm64 (missing)"
          FILES=""
          for f in dist/${PROJECT_NAME}-linux-amd64 dist/${PROJECT_NAME}-windows-amd64.exe dist/${PROJECT_NAME}-darwin-amd64 dist/${PROJECT_NAME}-darwin-arm64; do
            [ -f "$f" ] && FILES="$FILES $f"
          done
          if [ -n "$FILES" ]; then
            zip packages/${PROJECT_NAME}-all-platforms.zip $FILES
          else
            echo "no files to bundle into all-platforms zip"
          fi
          ls -la packages/
      - name: Upload distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: distribution-packages
          path: packages/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: package
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download distribution packages
        uses: actions/download-artifact@v4
        with:
          name: distribution-packages
          path: packages/
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            packages/${{ env.PROJECT_NAME }}-linux-amd64.zip
            packages/${{ env.PROJECT_NAME }}-windows-amd64.zip
            packages/${{ env.PROJECT_NAME }}-darwin-amd64.zip
            packages/${{ env.PROJECT_NAME }}-darwin-arm64.zip
            packages/${{ env.PROJECT_NAME }}-all-platforms.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
